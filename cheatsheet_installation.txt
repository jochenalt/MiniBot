---- enable VM settings inw BIOS 
- In BIOS Settings: Enable virtualizations

--- setting up a Ubuntu 18.04 VM  on Windows 10
- download ubuntu 18.04 64 bit (AMD64) image) Image from http://releases.ubuntu.com/18.04/
- download virtual box 5.2.8 from  https://www.virtualbox.org/
- In settings, set path for virtual boxes
- install virtualbox Ubuntu along https://www.codeooze.com/windows-10/windows-10-ubuntu-vbox/

--- install gnome tweak tool
sudo apt install gnome-tweak-tool
# look for Tweak, and turn of animations

--- install gitkraken
sudo apt-get update
sudo apt-get install git
wget https://release.gitkraken.com/linux/gitkraken-amd64.deb
sudo dpkg -i gitkraken-amd64.deb

--- install git


--- instal sublime
wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -
echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list
sudo apt-get update
sudo apt-get install sublime-text

--- install ROS
- Install ROS melodic according to http://wiki.ros.org/ROS/Installation
sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
sudo apt-get update
sudo apt-get install ros-melodic-desktop-full
sudo apt-get install ros-melodic-joint-state-publisher-gui
sudo apt-get install ros-melodic-roswww
sudo apt-get install python-catkin-tools 
sudo apt-get install ros-melodic-catkin

--- install necessities for ros3djs: rosbridge server, tf2 web republisher, robot_state_publisher, joint_state_publisher,
sudo apt-get install ros-melodic-rosbridge-suite
sudo apt-get install ros-melodic-tf2-web-republisher
sudo apt-get install ros-melodic-robot-state-publisher
sudo apt-get install ros-melodic-interactive-marker-proxy

--- install mongodb
sudo apt-get install ros-melodic-mongodb-store
sudo mkdir -p /opt/ros/mongodb_store
sudo chmod a+w /opt/ros/mongodb_store


--- install moveit
sudo apt-get install ros-melodic-moveit

-- install industrial-core
sudo apt-get install ros-melodic-industrial-core

sudo apt install python-pip
python -m pip install tornado
sudo apt install python-bson

sudo rosdep init
rosdep update
echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc
source ~/.bashrc


--- install minibot sources
cd ~
git clone https://github.com/jochenalt/MiniBot.git -b master

---  generate catkin workspace

mkdir -p ~catkin_ws/src
cd catkin_ws/src

--- link to minibot sources
ln -s ~/Minibot/code/ros/minibot ~/catkin_ws/src
ln -s ~/Minibot/code/ros/roswww ~/catkin_ws/src
ln -s ~/Minibot/code/ros/minibot_ikfast_plugin/ ~/catkin_ws/src
ln -s ~/Minibot/code/ros/minibot_moveit_config ~/catkin_ws/src

source ~/.bashrc

--- build (takes a while)
cd ~/catkin_ws/src
catkin build

--- install and create IKFast, along to https://ros-planning.github.io/moveit_tutorials/doc/ikfast/ikfast_tutorial.html
sudo apt-get install docker.io
sudo service docker start
sudo usermod -a -G docker $USER
# log off/log on
sudo apt-get install ros-melodic-collada-urdf
roscd minibot_moveit_config
cd config
rosrun xacro xacro -o minibot.urdf minibot.urdf.xacro
rosrun xacro xacro -o minibot.srdf minibot.srdf.xacro
rosrun collada_urdf urdf_to_collada minibot.urdf minibot.dae
rosrun moveit_kinematics round_collada_numbers.py minibot.dae minibot.rounded.dae 7
cd ../..
# rosrun moveit_kinematics auto_create_ikfast_moveit_plugin.sh --name minibot --pkg minibot_ikfast_plugin --iktype Transform6D minibot.urdf minibot_arm base_link tool0_link
rosrun moveit_kinematics auto_create_ikfast_moveit_plugin.sh --name minibot --pkg minibot_ikfast_plugin --iktype Transform6D minibot_moveit_config/config/minibot.rounded.dae minibot_arm base_link tool0_link
roscd minibot
cd ..
rospack plugins --attrib=plugin moveit_core


----- Setup ODroid C2 ---
download Ubuntu 18 image fom http://de.eu.odroid.in/ubuntu_18.04lts C2/ubuntu-18.04.3-3.16-mate-odroid-c2-20190820.img.xz
download and install winDiskImager from https://netcologne.dl.sourceforge.net/project/win32diskimager/Archive/win32diskimager-1.0.0-install.exe
create micro SD card with WinDiskImager

# fetch odroid-utility
>su
>wget -O /usr/local/bin/odroid-utility.sh https://raw.githubusercontent.com/mdrjr/odroid-utility/master/odroid-utility.sh
>chmod +x /usr/local/bin/odroid-utility.sh
>/usr/local/bin/odroid-utility.sh
# enhance partition, and update firmware/kernel
# update everything 

sudo apt-key adv -v --keyserver keyserver.ubuntu.com --recv-keys 5360FB9DAB19BAC9
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys AB19BAC9
>apt-get update
>apt-get upgrade
>apt-get dist-upgrade

----- configure WIFI on ODroid C2 -----

# act according to http://linux.icydog.net/wpa.php to create /etc/wpa_supplicant.conf

>sudo nmcli device wifi connect "lorem ipsum dolor sit amet" password "7386801780590940"
>sudo reboot
# find out IP address with 
>ifconfig
# connect via kitty with ssh, ip address, port 22

------- create sudo-enabled user  ----
>adduser jochenalt
>addgroup jochenalt sudo 
---- sudo without password -----
>su
>vi /etc/sudoers
# add to last line
# odroid ALL=(ALL) NOPASSWD: ALL
# jochenalt ALL=(ALL) NOPASSWD: ALL

### CPU frequency ###
>sudo apt-get install cpufrequtils
>cpufreq-set -r -g ondemand
>cpufreq-info
>echo $((`cpufreq-info -f` /1000))'Mhz' $((`cat /sys/devices/virtual/thermal/thermal_zone0/temp` /1000))'°'
>cpufreq-info -c 0 -f -m;cpufreq-info -c 1 -f -m;cpufreq-info -c 2 -f -m;cpufreq-info -c 3 -f -m; cpufreq-info -c 4 -f -m;cpufreq-info -c 5 -f -m;cpufreq-info -c 6 -f -m;cpufreq-info -c 7 -f -m;
# add alias commands
echo "" >> >> ~/.bashrc
echo "# alias for cpu frequency and temperature" >> >> ~/.bashrc
echo "alias cpu='cpufreq-info -c 0 -f -m;cpufreq-info -c 1 -f -m;cpufreq-info -c 2 -f -m;cpufreq-info -c 3 -f -m; cpufreq-info -c 4 -f -m;cpufreq-info -c 5 -f -m;cpufreq-info -c 6 -f -m;cpufreq-info -c 7 -f -m;'" >> ~/.bashrc
echo "alias temperatur='echo $((`cpufreq-info -f` /1000))'Mhz' $((`cat /sys/devices/virtual/thermal/thermal_zone0/temp` /1000))'°''" >> ~/.bashrc

------------------ prepare git ----------------------
# set standard user name
git config --global user.name "jochen.alt@gmx.net"
# cache the credentials for one day
git config --global credential.helper "cache --timeout=86400"

--- install ros ---
- Install ROS melodic according to http://wiki.ros.org/ROS/Installation

sudo apt-get install python-catkin-tools 
sudo apt-get install libblas-dev
sudo apt-get install liblapack-dev
sudo apt-get install python-openssl
sudo apt-get install python-bson
sudo apt-get install python-autobahn


sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
sudo apt-get update
sudo apt-get install ros-melodic-ros-base
sudo apt-get install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential
sudo apt-get install ros-melodic-joint-state-publisher-gui
sudo apt-get install ros-melodic-catkin
sudo apt-get install ros-melodic-eigen-conversions

--- install necessities for ros3djs: rosbridge server, tf2 web republisher, robot_state_publisher, joint_state_publisher,
sudo apt-get install ros-melodic-rosbridge-suite ros-melodic-tf2-web-republisher 
sudo apt-get install ros-melodic-robot-state-publisher ros-melodic-interactive-marker-proxy

--- install mongodb
sudo apt-get install ros-melodic-mongodb-store
sudo mkdir /opt/ros/mongodb_store
sudo chmod a+w /opt/ros/mongodb_store

-- install c++ driver for mongo (according to http://mongocxx.org/legacy-v1/installation/)
-- dont install libmongoclient-dev!
cd ~
sudo apt-get install scons
git clone -b releases/legacy https://github.com/mongodb/mongo-cxx-driver.git
cd mongo-cxx-driver/
git checkout legacy
scons --c++11=on --prefix=$HOME/mongo-client-install install
scons --disable-warnings-as-errors --c++11=on --prefix=$HOME/mongo-client-install install 

--- install moveit
sudo apt-get install ros-melodic-moveit

sudo apt-get install ros-melodic-descartes_capability

sudo apt install python-pip
python -m pip install tornado
pip install twisted
pip install autobahn 

sudo rosdep init
rosdep update
echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc
source ~/.bashrc

--- install minibot sources
cd ~
git clone https://github.com/jochenalt/MiniBot.git -b master
ln -s ~/MiniBot/code/ros/minibot ~/catkin_ws/src
ln -s ~/MiniBot/code/ros/roswww ~/catkin_ws/src
ln -s ~/MiniBot/code/ros/minibot_ikfast_plugin/ ~/catkin_ws/src
ln -s ~/MiniBot/code/ros/minibot_moveit_config ~/catkin_ws/src

--- setup mongodb
in .bashrc
rosparam set mongodb_port 62345
rosparam set mongodb_host localhost
rosrun mongodb_store mongodb_server.py

--- install desca

rtes along https://github.com/PickNikRobotics/descartes_capability
sudo apt-get install python-wstool python-catkin-tools
export CATKIN_WS=~/ws_catkin/
#git clone https://github.com/PickNikRobotics/descartes_capability.git
#wstool init ~/catkin_ws/src
#wstool merge -t ~/catkin_ws/src descartes_capability/descartes_capability.rosinstall
#wstool update -t ~/catkin_ws/src
rosdep install --from-paths ~/catkin_ws/src --ignore-src --rosdistro melodic
cd ~/catkin_ws
catkin config --extend /opt/ros/melodic --cmake-args -DCMAKE_BUILD_TYPE=Release
catkin build

--- update descartes
cd $CATKIN_WS/src/descartes_capability
git checkout master
git pull origin master
cd ~/catkin_ws/src
wstool merge descartes_capability/descartes_capability.rosinstall
wstool update
rosdep install --from-paths . --ignore-src --rosdistro melodic


--- install eclipse along http://wiki.ros.org/IDEs with catkin tools
# download Eclipse for C++ from https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2020-03/R/http://ftp-stud.fht-esslingen.de/pub/Mirrors/eclipse/technology/epp/downloads/release/2020-03/R/eclipse-cpp-2020-03-R-incubation-linux-gtk-x86_64.tar.gz
# install java
sudo apt install default-jre
# extra in ~
catkin build  --force-cmake -G"Eclipse CDT4 - Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug
~/catkin/src/generate_eclipse_files.sh
catkin build  -DCMAKE_BUILD_TYPE=Debug
ln -s ~/Minibot/code/ros/bin/generate_eclipse_project_files.sh .
./generate_eclipse_project_files

--- start minibot server without debugging in Eclipse
cd ~/catkin_ws
roslaunch minibot minibot.launch 

--- start minibot server without server node, it has to be started separately in Eclipse
cd ~/catkin_ws
roslaunch minibot minibot.launch debug_minibot_server:='1'

----
ToDos

create trajectories with timewise constant waypoints: 
  https://answers.ros.org/question/276995/fix-time-step-in-generated-moveit-trajectories/
  https://github.com/ros-industrial/industrial_core/blob/kinetic-devel/industrial_trajectory_filters/planning_request_adapters_plugin_description.xml#L13

adapt joint limits according to servos 