<launch>
  <arg name="debug" default="false" />
  <arg name="pipeline" default="ompl" />f

  <!-- start the database server -->
  <!-- <node  name="mongodb_server" pkg="mongodb_store" type="mongodb_server.py" output="screen"/> -->

  <!-- start a node providing services to access the database -->
  <node  name="mongodb_service" pkg="mongodb_store" type="message_store_node.py" output="screen"/>

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find minibot)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
  </include>


  <!-- listen to  /joint states, do forward kinematics and publish in tf -->
  <!-- publish in the same frequency as coming from joint_states -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
    <rosparam param="ignore_timestamp">true</rosparam>
  </node>

  <!-- Run the main MoveIt executable without trajectory execution
       (we do not have controllers configured by default) -->
  <include file="$(find minibot)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="true"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="pipeline" value="$(arg pipeline)"  />
  </include>

  <!-- throttle tf before sending to the rosbridge server -->
  <node name="tf2_web_republisher" pkg="tf2_web_republisher" type="tf2_web_republisher">
    <rosparam param="angularThres">0.0001</rosparam>
    <rosparam param="transThres">0.0001</rosparam>
    <rosparam param="rate">20</rosparam> <!-- maximum frequency sent to the browser -->
  </node>

  <!-- provide websocket procotol to let the server communicate with the browsser-->
  <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch" >
  </include>

</launch>
